// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/**
 * ======================= ENUMS =======================
 */

enum CustomerOrigin {
  PHONE
  WALKIN
  UBER
  GLOVO
  QR
}
enum CustomerSegment {
  S1 // Potencial: 0–1 compras
  S2 // Inactivo: >1 compras y última > 30 días
  S3 // Activo:   última ≤ 30 días
  S4 // CMV:      S3 y ticket medio > ticket medio empresa
}
enum DeliveryMethod {
  PICKUP
  COURIER
  UBER
  GLOVO
}
enum OrderStatus {
  PENDING
  AWAITING_PAYMENT
  PAID
  CANCELED
}
enum Channel {
  WHATSAPP
  PHONE
  WEB
}
enum CouponKind {
  PERCENT
  AMOUNT
}
enum CouponVariant {
  FIXED
  RANGE
}
enum CouponStatus {
  ACTIVE
  USED
  EXPIRED
  DISABLED
}
enum CouponAcquisition {
  GAME      // premio de juego
  CLAIM     // reclamo manual / galería
  REWARD    // recompensa (p.ej. after-purchase)
  BULK      // carga masiva u operación
  DIRECT    // entregado ad-hoc
  OTHER
}
enum CouponLogic {
  RANDOM   
  PERCENT  
  AMOUNT   
}
enum CouponChannel {
  GAME
  WEB
  CRM
  STORE
  APP
  SMS
  EMAIL
}
/**
 * ======================= MODELOS =======================
 */

model MenuPizza {
  id            Int      @id @default(autoincrement())
  name          String
  category      String?
  selectSize    Json
  priceBySize   Json
  ingredients   Json
  cookingMethod String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  stocks StorePizzaStock[]
}
model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String
  category  String
  stock     Int      @default(0)
  unit      String?
  costPrice Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Store {
  id              Int      @id @default(autoincrement())
  storeName       String
  address         String
  latitude        Float?
  longitude       Float?
  city            String?
  zipCode         String?
  email           String?
  tlf             String?
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  acceptingOrders Boolean  @default(true)

  stocks      StorePizzaStock[]
  sales       Sale[]
  redemptions CouponRedemption[] @relation("StoreToRedemptions")
}
model StorePizzaStock {
  storeId   Int
  pizzaId   Int
  stock     Int      @default(0)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  store Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  pizza MenuPizza @relation(fields: [pizzaId], references: [id], onDelete: Cascade)

  @@id([storeId, pizzaId])
}
model Customer {
  id                Int             @id @default(autoincrement())
  code              String          @unique
  name              String?
  phone             String?         @unique
  email             String?         @unique
  address_1         String          @unique
  portal            String?
  observations      String?
  lat               Float?
  lng               Float?
  origin            CustomerOrigin  @default(PHONE)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  daysOff           Int?
  isRestricted      Boolean         @default(false)
  restrictedAt      DateTime?
  restrictionReason String?
  segment           CustomerSegment @default(S1)
  segmentUpdatedAt  DateTime?

  assignedCoupons Coupon[]           @relation("CustomerAssignedCoupons")
  sales           Sale[]             @relation("CustomerSales")
  redemptions     CouponRedemption[] @relation("CustomerToRedemptions")
  plays           GamePlay[]     
}
model Sale {
  id                      Int            @id @default(autoincrement())
  code                    String         @unique
  date                    DateTime       @default(now())
  deliveredAt             DateTime?
  storeId                 Int
  customerId              Int?
  type                    String
  delivery                DeliveryMethod
  customerData            Json?
  products                Json
  extras                  Json           @default("[]")
  totalProducts           Float
  discounts               Float          @default(0)
  total                   Float
  processed               Boolean        @default(false)
  notes                   String?
  createdAt               DateTime       @default(now())
  status                  OrderStatus    @default(PENDING)
  channel                 Channel        @default(WHATSAPP)
  currency                String         @default("EUR")
  address_1               String?
  lat                     Float?
  lng                     Float?
  stripePaymentIntentId   String?        @unique @db.VarChar(191)
  stripeCheckoutSessionId String?        @unique @db.VarChar(191)

  store    Store     @relation(fields: [storeId], references: [id])
  customer Customer? @relation("CustomerSales", fields: [customerId], references: [id])

  redemptions CouponRedemption[] @relation("SaleToRedemptions")

  @@index([date])
}
model AppMeta {
  id              Int      @id @default(1)
  acceptingOrders Boolean  @default(true)
  closedMessage   String?  @db.Text
  updatedAt       DateTime @updatedAt
}
model Coupon {
  id    Int    @id @default(autoincrement())
  code  String @unique
  kind    CouponKind    @default(PERCENT)
  variant CouponVariant @default(FIXED)
  percent    Int?
  amount     Decimal? @db.Decimal(10, 2)
  percentMin Int?
  percentMax Int?
  maxAmount  Decimal? @db.Decimal(10, 2)
  acquisition CouponAcquisition?   
  channel     CouponChannel?       
  gameId      Int?                
  campaign    String?           
  meta        Json?
  segments     Json?
  assignedToId Int?
  assignedTo   Customer? @relation("CustomerAssignedCoupons", fields: [assignedToId], references: [id], onDelete: SetNull)
  activeFrom  DateTime?
  expiresAt   DateTime?
  daysActive  Json?
  windowStart Int?
  windowEnd   Int?
  usageLimit Int          @default(1)
  usedCount  Int          @default(0)
  status     CouponStatus @default(ACTIVE)
  usedAt    DateTime?
  createdAt DateTime @default(now())
  game      Game? @relation("GameCoupons", fields: [gameId], references: [id], onDelete: SetNull)
  redemptions CouponRedemption[] @relation("CouponToRedemptions")

  @@index([status])
  @@index([assignedToId])
  @@index([expiresAt])

  // Índices útiles para pools y analítica
  @@index([acquisition])
  @@index([channel])
  @@index([gameId])
  @@index([acquisition, gameId])
}
model CouponRedemption {
  id Int @id @default(autoincrement())

  couponId Int?
  coupon   Coupon? @relation("CouponToRedemptions", fields: [couponId], references: [id], onDelete: SetNull)

  saleId Int?
  sale   Sale? @relation("SaleToRedemptions", fields: [saleId], references: [id], onDelete: SetNull)

  customerId Int?
  customer   Customer? @relation("CustomerToRedemptions", fields: [customerId], references: [id], onDelete: SetNull)

  storeId Int?
  store   Store? @relation("StoreToRedemptions", fields: [storeId], references: [id], onDelete: SetNull)

  couponCode String

  // Snapshot de contexto (NUEVO - opcional)
  acquisition   CouponAcquisition?
  channel       CouponChannel?
  gameId        Int?
  campaign      String?

  segmentAtRedeem CustomerSegment?
  kind            CouponKind
  variant         CouponVariant
  percentApplied  Int?
  amountApplied   Decimal? @db.Decimal(10, 2)

  discountValue Decimal? @db.Decimal(10, 2)

  redeemedAt DateTime @default(now())
  createdAt  DateTime @default(now())

  @@index([couponCode])
  @@index([redeemedAt])
  @@index([saleId])
  @@index([customerId])
  @@index([storeId])
  @@index([gameId])
  @@index([channel])
  @@index([acquisition])
}
model Game {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  image       String?
  active      Boolean   @default(true)
  storeId     Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  coupons     Coupon[]  @relation("GameCoupons")
  plays       GamePlay[]
}
model GamePlay {
  id         Int       @id @default(autoincrement())
  gameId     Int
  playerId   Int?
  ip         String?
  result     Json?
  won        Boolean   @default(false)
  createdAt  DateTime  @default(now())

  game       Game      @relation(fields: [gameId], references: [id])
  customer   Customer? @relation(fields: [playerId], references: [id])
}

