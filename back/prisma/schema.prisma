// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



generator client {
  provider = "prisma-client-js"
}

/**
 * ======================== MENÃš ========================
 */
model MenuPizza {
  id            Int      @id @default(autoincrement())
  name          String
  category      String?
  selectSize    Json
  priceBySize   Json
  ingredients   Json
  cookingMethod String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  stocks StorePizzaStock[]
}

/**
 * ====================== INVENTARIO =====================
 */
model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String
  category  String
  stock     Int      @default(0)
  unit      String?
  costPrice Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * ======================== TIENDA =======================
 */
model Store {
  id        Int      @id @default(autoincrement())
  storeName String
  address   String
  latitude  Float?
  longitude Float?
  city      String?
  zipCode   String?
  email     String?
  tlf       String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  acceptingOrders   Boolean  @default(true)
  stocks StorePizzaStock[]
  sales  Sale[]
}

/**
 * junction table: stock por tienda + pizza
 */
model StorePizzaStock {
  storeId   Int
  pizzaId   Int
  stock     Int      @default(0)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  store Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  pizza MenuPizza @relation(fields: [pizzaId], references: [id], onDelete: Cascade)

  @@id([storeId, pizzaId])
}

/**
 * ======================== CLIENTE ======================
 */
enum CustomerOrigin {
  PHONE
  WALKIN
  UBER
  GLOVO
  QR
}

model Customer {
  id           Int            @id @default(autoincrement())
  code         String         @unique
  name         String?
  phone        String?        @unique
  address_1    String         @unique
  portal       String?
  observations String?
  lat          Float?
  lng          Float?
  origin       CustomerOrigin @default(PHONE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  daysOff      Int?

  sales Sale[] @relation("CustomerSales")
}

/**
 * ========================= VENTA =======================
 */
enum DeliveryMethod {
  PICKUP
  COURIER
  UBER
  GLOVO
}

enum OrderStatus {
  PENDING
  AWAITING_PAYMENT
  PAID
  CANCELED
}

enum Channel {
  WHATSAPP
  PHONE
  WEB
}

model Coupon {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  percent   Int      // 5..10
  used      Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())
  expiresAt DateTime?

}

model AppMeta {
  id              Int      @id @default(1)
  acceptingOrders Boolean  @default(true)
  closedMessage   String?  @db.Text
  updatedAt       DateTime @updatedAt
}

model Sale {
  id            Int            @id @default(autoincrement())
  code          String         @unique
  date          DateTime       @default(now())
  deliveredAt   DateTime?
  storeId       Int
  customerId    Int?
  type          String
  delivery      DeliveryMethod
  customerData  Json?
  products      Json
  extras        Json           @default("[]")
  totalProducts Float
  discounts     Float          @default(0)
  total         Float
  processed     Boolean        @default(false)
  notes         String?
  createdAt     DateTime       @default(now())
  status                  OrderStatus @default(PENDING)
  channel                 Channel     @default(WHATSAPP)
  currency                String      @default("EUR")
  address_1               String?
  lat                     Float?
  lng                     Float?
  stripePaymentIntentId   String?     @unique @db.VarChar(191)
  stripeCheckoutSessionId String?     @unique @db.VarChar(191)

  store    Store     @relation(fields: [storeId], references: [id])
  customer Customer? @relation("CustomerSales", fields: [customerId], references: [id])

  @@index([date])
}
